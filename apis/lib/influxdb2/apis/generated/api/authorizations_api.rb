=begin
#InfluxDB OSS API Service

#The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 

The version of the OpenAPI document: 2.0.0

Generated by: https://openapi-generator.tech

=end

require 'cgi'

module InfluxDB2::API
  class AuthorizationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete an authorization
    # @param auth_id [String] The ID of the authorization to delete.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [nil]
    def delete_authorizations_id(auth_id, opts = {})
      delete_authorizations_id_with_http_info(auth_id, opts)
      nil
    end

    # Delete an authorization
    # @param auth_id [String] The ID of the authorization to delete.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_authorizations_id_with_http_info(auth_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthorizationsApi.delete_authorizations_id ...'
      end
      # verify the required parameter 'auth_id' is set
      if @api_client.config.client_side_validation && auth_id.nil?
        fail ArgumentError, "Missing the required parameter 'auth_id' when calling AuthorizationsApi.delete_authorizations_id"
      end
      # resource path
      local_var_path = '/authorizations/{authID}'.sub('{' + 'authID' + '}', CGI.escape(auth_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"AuthorizationsApi.delete_authorizations_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthorizationsApi#delete_authorizations_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all authorizations
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @option opts [String] :user_id Only show authorizations that belong to a user ID.
    # @option opts [String] :user Only show authorizations that belong to a user name.
    # @option opts [String] :org_id Only show authorizations that belong to an organization ID.
    # @option opts [String] :org Only show authorizations that belong to a organization name.
    # @return [Authorizations]
    def get_authorizations(opts = {})
      data, _status_code, _headers = get_authorizations_with_http_info(opts)
      data
    end

    # List all authorizations
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @option opts [String] :user_id Only show authorizations that belong to a user ID.
    # @option opts [String] :user Only show authorizations that belong to a user name.
    # @option opts [String] :org_id Only show authorizations that belong to an organization ID.
    # @option opts [String] :org Only show authorizations that belong to a organization name.
    # @return [Array<(Authorizations, Integer, Hash)>] Authorizations data, response status code and response headers
    def get_authorizations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthorizationsApi.get_authorizations ...'
      end
      # resource path
      local_var_path = '/authorizations'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'userID'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'user'] = opts[:'user'] if !opts[:'user'].nil?
      query_params[:'orgID'] = opts[:'org_id'] if !opts[:'org_id'].nil?
      query_params[:'org'] = opts[:'org'] if !opts[:'org'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Authorizations'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"AuthorizationsApi.get_authorizations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthorizationsApi#get_authorizations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an authorization
    # @param auth_id [String] The ID of the authorization to get.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Authorization]
    def get_authorizations_id(auth_id, opts = {})
      data, _status_code, _headers = get_authorizations_id_with_http_info(auth_id, opts)
      data
    end

    # Retrieve an authorization
    # @param auth_id [String] The ID of the authorization to get.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(Authorization, Integer, Hash)>] Authorization data, response status code and response headers
    def get_authorizations_id_with_http_info(auth_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthorizationsApi.get_authorizations_id ...'
      end
      # verify the required parameter 'auth_id' is set
      if @api_client.config.client_side_validation && auth_id.nil?
        fail ArgumentError, "Missing the required parameter 'auth_id' when calling AuthorizationsApi.get_authorizations_id"
      end
      # resource path
      local_var_path = '/authorizations/{authID}'.sub('{' + 'authID' + '}', CGI.escape(auth_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Authorization'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"AuthorizationsApi.get_authorizations_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthorizationsApi#get_authorizations_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an authorization to be active or inactive
    # @param auth_id [String] The ID of the authorization to update.
    # @param authorization_update_request [AuthorizationUpdateRequest] Authorization to update
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Authorization]
    def patch_authorizations_id(auth_id, authorization_update_request, opts = {})
      data, _status_code, _headers = patch_authorizations_id_with_http_info(auth_id, authorization_update_request, opts)
      data
    end

    # Update an authorization to be active or inactive
    # @param auth_id [String] The ID of the authorization to update.
    # @param authorization_update_request [AuthorizationUpdateRequest] Authorization to update
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(Authorization, Integer, Hash)>] Authorization data, response status code and response headers
    def patch_authorizations_id_with_http_info(auth_id, authorization_update_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthorizationsApi.patch_authorizations_id ...'
      end
      # verify the required parameter 'auth_id' is set
      if @api_client.config.client_side_validation && auth_id.nil?
        fail ArgumentError, "Missing the required parameter 'auth_id' when calling AuthorizationsApi.patch_authorizations_id"
      end
      # verify the required parameter 'authorization_update_request' is set
      if @api_client.config.client_side_validation && authorization_update_request.nil?
        fail ArgumentError, "Missing the required parameter 'authorization_update_request' when calling AuthorizationsApi.patch_authorizations_id"
      end
      # resource path
      local_var_path = '/authorizations/{authID}'.sub('{' + 'authID' + '}', CGI.escape(auth_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(authorization_update_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Authorization'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"AuthorizationsApi.patch_authorizations_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthorizationsApi#patch_authorizations_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an authorization
    # @param authorization_post_request [AuthorizationPostRequest] Authorization to create
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Authorization]
    def post_authorizations(authorization_post_request, opts = {})
      data, _status_code, _headers = post_authorizations_with_http_info(authorization_post_request, opts)
      data
    end

    # Create an authorization
    # @param authorization_post_request [AuthorizationPostRequest] Authorization to create
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(Authorization, Integer, Hash)>] Authorization data, response status code and response headers
    def post_authorizations_with_http_info(authorization_post_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthorizationsApi.post_authorizations ...'
      end
      # verify the required parameter 'authorization_post_request' is set
      if @api_client.config.client_side_validation && authorization_post_request.nil?
        fail ArgumentError, "Missing the required parameter 'authorization_post_request' when calling AuthorizationsApi.post_authorizations"
      end
      # resource path
      local_var_path = '/authorizations'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(authorization_post_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Authorization'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"AuthorizationsApi.post_authorizations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthorizationsApi#post_authorizations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
