=begin
#InfluxDB OSS API Service

#The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 

The version of the OpenAPI document: 2.0.0

Generated by: https://openapi-generator.tech

=end

require 'cgi'

module InfluxDB2::API
  class TasksApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a task
    # Deletes the specified [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) and all associated records (task runs, logs, and labels). Once the task is deleted, InfluxDB cancels all scheduled runs of the task.  To disable a task instead of delete it, use [`PATCH /api/v2/tasks/TASK_ID`](#operation/PatchTasksID) to set the task status  to `inactive`. 
    # @param task_id [String] A task ID. Specifies the [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) to delete. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [nil]
    def delete_tasks_id(task_id, opts = {})
      delete_tasks_id_with_http_info(task_id, opts)
      nil
    end

    # Delete a task
    # Deletes the specified [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) and all associated records (task runs, logs, and labels). Once the task is deleted, InfluxDB cancels all scheduled runs of the task.  To disable a task instead of delete it, use [&#x60;PATCH /api/v2/tasks/TASK_ID&#x60;](#operation/PatchTasksID) to set the task status  to &#x60;inactive&#x60;. 
    # @param task_id [String] A task ID. Specifies the [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) to delete. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_tasks_id_with_http_info(task_id, opts = {})
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling TasksApi.delete_tasks_id"
      end
      # resource path
      local_var_path = '/tasks/{taskID}'.sub('{' + 'taskID' + '}', CGI.escape(task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"TasksApi.delete_tasks_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      return data, status_code, headers
    end

    # Delete a label from a task
    # Deletes a label from a [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task). 
    # @param task_id [String] A task ID. Specifies the [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) to delete the label from. 
    # @param label_id [String] A label ID. Specifies the label to delete. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [nil]
    def delete_tasks_id_labels_id(task_id, label_id, opts = {})
      delete_tasks_id_labels_id_with_http_info(task_id, label_id, opts)
      nil
    end

    # Delete a label from a task
    # Deletes a label from a [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task). 
    # @param task_id [String] A task ID. Specifies the [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) to delete the label from. 
    # @param label_id [String] A label ID. Specifies the label to delete. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_tasks_id_labels_id_with_http_info(task_id, label_id, opts = {})
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling TasksApi.delete_tasks_id_labels_id"
      end
      # verify the required parameter 'label_id' is set
      if @api_client.config.client_side_validation && label_id.nil?
        fail ArgumentError, "Missing the required parameter 'label_id' when calling TasksApi.delete_tasks_id_labels_id"
      end
      # resource path
      local_var_path = '/tasks/{taskID}/labels/{labelID}'.sub('{' + 'taskID' + '}', CGI.escape(task_id.to_s)).sub('{' + 'labelID' + '}', CGI.escape(label_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"TasksApi.delete_tasks_id_labels_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      return data, status_code, headers
    end

    # Remove a member from a task
    # **Deprecated**: Tasks don't use `owner` and `member` roles. Use [`/api/v2/authorizations`](#tag/Authorizations-(API-tokens)) to assign user permissions.  Removes a member from a [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task). 
    # @param user_id [String] A user ID. Specifies the member to remove.
    # @param task_id [String] A task ID. Specifies the [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) to remove the member from.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [nil]
    def delete_tasks_id_members_id(user_id, task_id, opts = {})
      delete_tasks_id_members_id_with_http_info(user_id, task_id, opts)
      nil
    end

    # Remove a member from a task
    # **Deprecated**: Tasks don&#39;t use &#x60;owner&#x60; and &#x60;member&#x60; roles. Use [&#x60;/api/v2/authorizations&#x60;](#tag/Authorizations-(API-tokens)) to assign user permissions.  Removes a member from a [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task). 
    # @param user_id [String] A user ID. Specifies the member to remove.
    # @param task_id [String] A task ID. Specifies the [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) to remove the member from.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_tasks_id_members_id_with_http_info(user_id, task_id, opts = {})
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TasksApi.delete_tasks_id_members_id"
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling TasksApi.delete_tasks_id_members_id"
      end
      # resource path
      local_var_path = '/tasks/{taskID}/members/{userID}'.sub('{' + 'userID' + '}', CGI.escape(user_id.to_s)).sub('{' + 'taskID' + '}', CGI.escape(task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"TasksApi.delete_tasks_id_members_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      return data, status_code, headers
    end

    # Remove an owner from a task
    # **Deprecated**: Tasks don't use `owner` and `member` roles. Use [`/api/v2/authorizations`](#tag/Authorizations-(API-tokens)) to assign user permissions.  Removes an owner from a [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task). 
    # @param user_id [String] A user ID. Specifies the owner to remove from the [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task).
    # @param task_id [String] A task ID. Specifies the [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) to remove the owner from. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [nil]
    def delete_tasks_id_owners_id(user_id, task_id, opts = {})
      delete_tasks_id_owners_id_with_http_info(user_id, task_id, opts)
      nil
    end

    # Remove an owner from a task
    # **Deprecated**: Tasks don&#39;t use &#x60;owner&#x60; and &#x60;member&#x60; roles. Use [&#x60;/api/v2/authorizations&#x60;](#tag/Authorizations-(API-tokens)) to assign user permissions.  Removes an owner from a [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task). 
    # @param user_id [String] A user ID. Specifies the owner to remove from the [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task).
    # @param task_id [String] A task ID. Specifies the [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) to remove the owner from. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_tasks_id_owners_id_with_http_info(user_id, task_id, opts = {})
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TasksApi.delete_tasks_id_owners_id"
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling TasksApi.delete_tasks_id_owners_id"
      end
      # resource path
      local_var_path = '/tasks/{taskID}/owners/{userID}'.sub('{' + 'userID' + '}', CGI.escape(user_id.to_s)).sub('{' + 'taskID' + '}', CGI.escape(task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"TasksApi.delete_tasks_id_owners_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      return data, status_code, headers
    end

    # Cancel a running task
    # Cancels a running [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task).  Use this endpoint to cancel a running task.  #### InfluxDB Cloud  - Doesn't support this operation. 
    # @param task_id [String] A task ID. Specifies the [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) to to cancel. 
    # @param run_id [String] A task run ID. Specifies the task run to cancel. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [nil]
    def delete_tasks_id_runs_id(task_id, run_id, opts = {})
      delete_tasks_id_runs_id_with_http_info(task_id, run_id, opts)
      nil
    end

    # Cancel a running task
    # Cancels a running [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task).  Use this endpoint to cancel a running task.  #### InfluxDB Cloud  - Doesn&#39;t support this operation. 
    # @param task_id [String] A task ID. Specifies the [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) to to cancel. 
    # @param run_id [String] A task run ID. Specifies the task run to cancel. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_tasks_id_runs_id_with_http_info(task_id, run_id, opts = {})
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling TasksApi.delete_tasks_id_runs_id"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling TasksApi.delete_tasks_id_runs_id"
      end
      # resource path
      local_var_path = '/tasks/{taskID}/runs/{runID}'.sub('{' + 'taskID' + '}', CGI.escape(task_id.to_s)).sub('{' + 'runID' + '}', CGI.escape(run_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"TasksApi.delete_tasks_id_runs_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      return data, status_code, headers
    end

    # List tasks
    # Lists [tasks](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task).  To limit which tasks are returned, pass query parameters in your request. If no query parameters are passed, InfluxDB returns all tasks up to the default `limit`.  #### Related guide  - [Process data with InfluxDB tasks](https://docs.influxdata.com/influxdb/latest/process-data/) 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @option opts [String] :name A task name. Only returns [tasks](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) that have the specified name. Different tasks may have the same name. 
    # @option opts [String] :after A task ID. Only returns [tasks](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) created after the specified task. 
    # @option opts [String] :user A user ID. Only returns [tasks](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) owned by the specified [user](https://docs.influxdata.com/influxdb/latest/reference/glossary/#user). 
    # @option opts [String] :org An organization name. Only returns tasks owned by the specified [organization](https://docs.influxdata.com/influxdb/latest/reference/glossary/#organization). 
    # @option opts [String] :org_id An organization ID. Only returns [tasks](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) owned by the specified [organization](https://docs.influxdata.com/influxdb/latest/reference/glossary/#organization). 
    # @option opts [String] :status A task status. Only returns [tasks](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) that have the specified status. 
    # @option opts [Integer] :limit The maximum number of [tasks](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) to return. Default is &#x60;100&#x60;. The minimum is &#x60;1&#x60; and the maximum is &#x60;500&#x60;.  To reduce the payload size, combine _&#x60;type&#x3D;basic&#x60;_ and _&#x60;limit&#x60;_ (see _Request samples_). For more information about the &#x60;basic&#x60; response, see the _&#x60;type&#x60;_ parameter.  (default to 100)
    # @option opts [String] :type A task type. Specifies the level of detail for [tasks](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) in the response. Default is &#x60;system&#x60;. The default (&#x60;system&#x60;) response contains all the metadata properties for tasks. To reduce the response size, pass &#x60;basic&#x60; to omit some task properties (&#x60;flux&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;).  (default to '')
    # @return [Tasks]
    def get_tasks(opts = {})
      data, _status_code, _headers = get_tasks_with_http_info(opts)
      data
    end

    # List tasks
    # Lists [tasks](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task).  To limit which tasks are returned, pass query parameters in your request. If no query parameters are passed, InfluxDB returns all tasks up to the default &#x60;limit&#x60;.  #### Related guide  - [Process data with InfluxDB tasks](https://docs.influxdata.com/influxdb/latest/process-data/) 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @option opts [String] :name A task name. Only returns [tasks](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) that have the specified name. Different tasks may have the same name. 
    # @option opts [String] :after A task ID. Only returns [tasks](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) created after the specified task. 
    # @option opts [String] :user A user ID. Only returns [tasks](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) owned by the specified [user](https://docs.influxdata.com/influxdb/latest/reference/glossary/#user). 
    # @option opts [String] :org An organization name. Only returns tasks owned by the specified [organization](https://docs.influxdata.com/influxdb/latest/reference/glossary/#organization). 
    # @option opts [String] :org_id An organization ID. Only returns [tasks](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) owned by the specified [organization](https://docs.influxdata.com/influxdb/latest/reference/glossary/#organization). 
    # @option opts [String] :status A task status. Only returns [tasks](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) that have the specified status. 
    # @option opts [Integer] :limit The maximum number of [tasks](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) to return. Default is &#x60;100&#x60;. The minimum is &#x60;1&#x60; and the maximum is &#x60;500&#x60;.  To reduce the payload size, combine _&#x60;type&#x3D;basic&#x60;_ and _&#x60;limit&#x60;_ (see _Request samples_). For more information about the &#x60;basic&#x60; response, see the _&#x60;type&#x60;_ parameter. 
    # @option opts [String] :type A task type. Specifies the level of detail for [tasks](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) in the response. Default is &#x60;system&#x60;. The default (&#x60;system&#x60;) response contains all the metadata properties for tasks. To reduce the response size, pass &#x60;basic&#x60; to omit some task properties (&#x60;flux&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;). 
    # @return [Array<(Tasks, Integer, Hash)>] Tasks data, response status code and response headers
    def get_tasks_with_http_info(opts = {})
      allowable_values = ["active", "inactive"]
      if @api_client.config.client_side_validation && opts[:'status'] && !allowable_values.include?(opts[:'status'])
        fail ArgumentError, "invalid value for \"status\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 500
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling TasksApi.get_tasks, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling TasksApi.get_tasks, must be greater than or equal to 1.'
      end

      allowable_values = ["basic", "system"]
      if @api_client.config.client_side_validation && opts[:'type'] && !allowable_values.include?(opts[:'type'])
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/tasks'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'user'] = opts[:'user'] if !opts[:'user'].nil?
      query_params[:'org'] = opts[:'org'] if !opts[:'org'].nil?
      query_params[:'orgID'] = opts[:'org_id'] if !opts[:'org_id'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Tasks'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"TasksApi.get_tasks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      return data, status_code, headers
    end

    # Retrieve a task
    # Retrieves the specified [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task). 
    # @param task_id [String] A task ID. Specifies the [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) to retrieve. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Task]
    def get_tasks_id(task_id, opts = {})
      data, _status_code, _headers = get_tasks_id_with_http_info(task_id, opts)
      data
    end

    # Retrieve a task
    # Retrieves the specified [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task). 
    # @param task_id [String] A task ID. Specifies the [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) to retrieve. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(Task, Integer, Hash)>] Task data, response status code and response headers
    def get_tasks_id_with_http_info(task_id, opts = {})
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling TasksApi.get_tasks_id"
      end
      # resource path
      local_var_path = '/tasks/{taskID}'.sub('{' + 'taskID' + '}', CGI.escape(task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Task'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"TasksApi.get_tasks_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      return data, status_code, headers
    end

    # List labels for a task
    # Lists all labels for a task.  Use this endpoint to list labels applied to a task. Labels are a way to add metadata to InfluxDB resources. You can use labels for grouping and filtering resources in the InfluxDB UI, `influx` CLI, and InfluxDB API. 
    # @param task_id [String] A task ID. Specifies the task to retrieve labels for. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [LabelsResponse]
    def get_tasks_id_labels(task_id, opts = {})
      data, _status_code, _headers = get_tasks_id_labels_with_http_info(task_id, opts)
      data
    end

    # List labels for a task
    # Lists all labels for a task.  Use this endpoint to list labels applied to a task. Labels are a way to add metadata to InfluxDB resources. You can use labels for grouping and filtering resources in the InfluxDB UI, &#x60;influx&#x60; CLI, and InfluxDB API. 
    # @param task_id [String] A task ID. Specifies the task to retrieve labels for. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(LabelsResponse, Integer, Hash)>] LabelsResponse data, response status code and response headers
    def get_tasks_id_labels_with_http_info(task_id, opts = {})
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling TasksApi.get_tasks_id_labels"
      end
      # resource path
      local_var_path = '/tasks/{taskID}/labels'.sub('{' + 'taskID' + '}', CGI.escape(task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'LabelsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"TasksApi.get_tasks_id_labels",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      return data, status_code, headers
    end

    # List logs for a task
    # Lists all log events for a [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task).  When a task runs, InfluxDB creates a `run` record in the task’s history. Logs associated with each run provide relevant log messages, timestamps, and the exit status of the `run` attempt.  Use this endpoint to retrieve only the log events for a task, without additional task metadata. 
    # @param task_id [String] A task ID. Specifies the [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) to retrieve logs for.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Logs]
    def get_tasks_id_logs(task_id, opts = {})
      data, _status_code, _headers = get_tasks_id_logs_with_http_info(task_id, opts)
      data
    end

    # List logs for a task
    # Lists all log events for a [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task).  When a task runs, InfluxDB creates a &#x60;run&#x60; record in the task’s history. Logs associated with each run provide relevant log messages, timestamps, and the exit status of the &#x60;run&#x60; attempt.  Use this endpoint to retrieve only the log events for a task, without additional task metadata. 
    # @param task_id [String] A task ID. Specifies the [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) to retrieve logs for.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(Logs, Integer, Hash)>] Logs data, response status code and response headers
    def get_tasks_id_logs_with_http_info(task_id, opts = {})
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling TasksApi.get_tasks_id_logs"
      end
      # resource path
      local_var_path = '/tasks/{taskID}/logs'.sub('{' + 'taskID' + '}', CGI.escape(task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Logs'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"TasksApi.get_tasks_id_logs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      return data, status_code, headers
    end

    # List all task members
    # **Deprecated**: Tasks don't use `owner` and `member` roles. Use [`/api/v2/authorizations`](#tag/Authorizations-(API-tokens)) to assign user permissions.  Lists all users that have the `member` role for the specified [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task). 
    # @param task_id [String] A task ID. Specifies the [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) to retrieve members for. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [ResourceMembers]
    def get_tasks_id_members(task_id, opts = {})
      data, _status_code, _headers = get_tasks_id_members_with_http_info(task_id, opts)
      data
    end

    # List all task members
    # **Deprecated**: Tasks don&#39;t use &#x60;owner&#x60; and &#x60;member&#x60; roles. Use [&#x60;/api/v2/authorizations&#x60;](#tag/Authorizations-(API-tokens)) to assign user permissions.  Lists all users that have the &#x60;member&#x60; role for the specified [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task). 
    # @param task_id [String] A task ID. Specifies the [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) to retrieve members for. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(ResourceMembers, Integer, Hash)>] ResourceMembers data, response status code and response headers
    def get_tasks_id_members_with_http_info(task_id, opts = {})
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling TasksApi.get_tasks_id_members"
      end
      # resource path
      local_var_path = '/tasks/{taskID}/members'.sub('{' + 'taskID' + '}', CGI.escape(task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResourceMembers'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"TasksApi.get_tasks_id_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      return data, status_code, headers
    end

    # List all owners of a task
    # **Deprecated**: Tasks don't use `owner` and `member` roles. Use [`/api/v2/authorizations`](#tag/Authorizations-(API-tokens)) to assign user permissions.  Lists all users that have the `owner` role for the specified task. 
    # @param task_id [String] A task ID. Specifies the task to retrieve owners for.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [ResourceOwners]
    def get_tasks_id_owners(task_id, opts = {})
      data, _status_code, _headers = get_tasks_id_owners_with_http_info(task_id, opts)
      data
    end

    # List all owners of a task
    # **Deprecated**: Tasks don&#39;t use &#x60;owner&#x60; and &#x60;member&#x60; roles. Use [&#x60;/api/v2/authorizations&#x60;](#tag/Authorizations-(API-tokens)) to assign user permissions.  Lists all users that have the &#x60;owner&#x60; role for the specified task. 
    # @param task_id [String] A task ID. Specifies the task to retrieve owners for.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(ResourceOwners, Integer, Hash)>] ResourceOwners data, response status code and response headers
    def get_tasks_id_owners_with_http_info(task_id, opts = {})
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling TasksApi.get_tasks_id_owners"
      end
      # resource path
      local_var_path = '/tasks/{taskID}/owners'.sub('{' + 'taskID' + '}', CGI.escape(task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResourceOwners'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"TasksApi.get_tasks_id_owners",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      return data, status_code, headers
    end

    # List runs for a task
    # Lists runs for the specified [task](https://docs.influxdata.com/influxdb/latest/process-data/).  To limit which task runs are returned, pass query parameters in your request. If you don't pass query parameters, InfluxDB returns all runs for the task up to the default `limit`. 
    # @param task_id [String] A task ID. Specifies the [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) to to list runs for. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @option opts [String] :after A task run ID. Only returns runs created after the specified run.
    # @option opts [Integer] :limit Limits the number of task runs returned. Default is &#x60;100&#x60;.  (default to 100)
    # @option opts [Time] :after_time A timestamp ([RFC3339 date/time format](https://docs.influxdata.com/influxdb/latest/reference/glossary/#rfc3339-timestamp)). Only returns runs scheduled after the specified time. 
    # @option opts [Time] :before_time A timestamp ([RFC3339 date/time format](https://docs.influxdata.com/influxdb/latest/reference/glossary/#rfc3339-timestamp)). Only returns runs scheduled before the specified time. 
    # @return [Runs]
    def get_tasks_id_runs(task_id, opts = {})
      data, _status_code, _headers = get_tasks_id_runs_with_http_info(task_id, opts)
      data
    end

    # List runs for a task
    # Lists runs for the specified [task](https://docs.influxdata.com/influxdb/latest/process-data/).  To limit which task runs are returned, pass query parameters in your request. If you don&#39;t pass query parameters, InfluxDB returns all runs for the task up to the default &#x60;limit&#x60;. 
    # @param task_id [String] A task ID. Specifies the [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) to to list runs for. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @option opts [String] :after A task run ID. Only returns runs created after the specified run.
    # @option opts [Integer] :limit Limits the number of task runs returned. Default is &#x60;100&#x60;. 
    # @option opts [Time] :after_time A timestamp ([RFC3339 date/time format](https://docs.influxdata.com/influxdb/latest/reference/glossary/#rfc3339-timestamp)). Only returns runs scheduled after the specified time. 
    # @option opts [Time] :before_time A timestamp ([RFC3339 date/time format](https://docs.influxdata.com/influxdb/latest/reference/glossary/#rfc3339-timestamp)). Only returns runs scheduled before the specified time. 
    # @return [Array<(Runs, Integer, Hash)>] Runs data, response status code and response headers
    def get_tasks_id_runs_with_http_info(task_id, opts = {})
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling TasksApi.get_tasks_id_runs"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 500
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling TasksApi.get_tasks_id_runs, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling TasksApi.get_tasks_id_runs, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/tasks/{taskID}/runs'.sub('{' + 'taskID' + '}', CGI.escape(task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'afterTime'] = opts[:'after_time'] if !opts[:'after_time'].nil?
      query_params[:'beforeTime'] = opts[:'before_time'] if !opts[:'before_time'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Runs'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"TasksApi.get_tasks_id_runs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      return data, status_code, headers
    end

    # Retrieve a run for a task.
    # Retrieves the specified run for the specified [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task).  Use this endpoint to retrieve detail and logs for a specific task run. 
    # @param task_id [String] A task ID. Specifies the [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) that the task run belongs to. 
    # @param run_id [String] A task run ID. Specifies the run to retrieve.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Run]
    def get_tasks_id_runs_id(task_id, run_id, opts = {})
      data, _status_code, _headers = get_tasks_id_runs_id_with_http_info(task_id, run_id, opts)
      data
    end

    # Retrieve a run for a task.
    # Retrieves the specified run for the specified [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task).  Use this endpoint to retrieve detail and logs for a specific task run. 
    # @param task_id [String] A task ID. Specifies the [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) that the task run belongs to. 
    # @param run_id [String] A task run ID. Specifies the run to retrieve.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(Run, Integer, Hash)>] Run data, response status code and response headers
    def get_tasks_id_runs_id_with_http_info(task_id, run_id, opts = {})
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling TasksApi.get_tasks_id_runs_id"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling TasksApi.get_tasks_id_runs_id"
      end
      # resource path
      local_var_path = '/tasks/{taskID}/runs/{runID}'.sub('{' + 'taskID' + '}', CGI.escape(task_id.to_s)).sub('{' + 'runID' + '}', CGI.escape(run_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Run'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"TasksApi.get_tasks_id_runs_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      return data, status_code, headers
    end

    # List logs for a run
    # Lists all logs for a task run. A log is a list of run events with `runID`, `time`, and `message` properties.  Use this endpoint to help analyze [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) performance and troubleshoot failed task runs. 
    # @param task_id [String] A task ID. Specifies the [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) that the run belongs to.
    # @param run_id [String] A run ID. Specifies the task run to list logs for.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Logs]
    def get_tasks_id_runs_id_logs(task_id, run_id, opts = {})
      data, _status_code, _headers = get_tasks_id_runs_id_logs_with_http_info(task_id, run_id, opts)
      data
    end

    # List logs for a run
    # Lists all logs for a task run. A log is a list of run events with &#x60;runID&#x60;, &#x60;time&#x60;, and &#x60;message&#x60; properties.  Use this endpoint to help analyze [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) performance and troubleshoot failed task runs. 
    # @param task_id [String] A task ID. Specifies the [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) that the run belongs to.
    # @param run_id [String] A run ID. Specifies the task run to list logs for.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(Logs, Integer, Hash)>] Logs data, response status code and response headers
    def get_tasks_id_runs_id_logs_with_http_info(task_id, run_id, opts = {})
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling TasksApi.get_tasks_id_runs_id_logs"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling TasksApi.get_tasks_id_runs_id_logs"
      end
      # resource path
      local_var_path = '/tasks/{taskID}/runs/{runID}/logs'.sub('{' + 'taskID' + '}', CGI.escape(task_id.to_s)).sub('{' + 'runID' + '}', CGI.escape(run_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Logs'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"TasksApi.get_tasks_id_runs_id_logs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      return data, status_code, headers
    end

    # Update a task
    # Updates the specified [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task), and then cancels all scheduled runs of the task.  Use this endpoint to set, modify, or clear task properties--for example: `cron`, `name`, `flux`, `status`. Once InfluxDB applies the update, it cancels all previously scheduled runs of the task.  #### Related guides  - [Update a task](https://docs.influxdata.com/influxdb/latest/process-data/manage-tasks/update-task/) - [Task configuration options](https://docs.influxdata.com/influxdb/latest/process-data/task-options/) 
    # @param task_id [String] A task ID. Specifies the [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task)to update. 
    # @param task_update_request [TaskUpdateRequest] In the request body, provide the task properties to update. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Task]
    def patch_tasks_id(task_id, task_update_request, opts = {})
      data, _status_code, _headers = patch_tasks_id_with_http_info(task_id, task_update_request, opts)
      data
    end

    # Update a task
    # Updates the specified [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task), and then cancels all scheduled runs of the task.  Use this endpoint to set, modify, or clear task properties--for example: &#x60;cron&#x60;, &#x60;name&#x60;, &#x60;flux&#x60;, &#x60;status&#x60;. Once InfluxDB applies the update, it cancels all previously scheduled runs of the task.  #### Related guides  - [Update a task](https://docs.influxdata.com/influxdb/latest/process-data/manage-tasks/update-task/) - [Task configuration options](https://docs.influxdata.com/influxdb/latest/process-data/task-options/) 
    # @param task_id [String] A task ID. Specifies the [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task)to update. 
    # @param task_update_request [TaskUpdateRequest] In the request body, provide the task properties to update. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(Task, Integer, Hash)>] Task data, response status code and response headers
    def patch_tasks_id_with_http_info(task_id, task_update_request, opts = {})
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling TasksApi.patch_tasks_id"
      end
      # verify the required parameter 'task_update_request' is set
      if @api_client.config.client_side_validation && task_update_request.nil?
        fail ArgumentError, "Missing the required parameter 'task_update_request' when calling TasksApi.patch_tasks_id"
      end
      # resource path
      local_var_path = '/tasks/{taskID}'.sub('{' + 'taskID' + '}', CGI.escape(task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(task_update_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Task'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"TasksApi.patch_tasks_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      return data, status_code, headers
    end

    # Create a task
    # Creates a [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) and returns the task.  Use this endpoint to create a scheduled task that runs a script.  #### Related guides  - [Get started with tasks](https://docs.influxdata.com/influxdb/latest/process-data/get-started/) - [Create a task](https://docs.influxdata.com/influxdb/latest/process-data/manage-tasks/create-task/) - [Common tasks](https://docs.influxdata.com/influxdb/latest/process-data/common-tasks/) - [Task configuration options](https://docs.influxdata.com/influxdb/latest/process-data/task-options/) 
    # @param task_create_request [TaskCreateRequest] In the request body, provide the task.  #### InfluxDB OSS  - Requires either the &#x60;org&#x60; parameter or the &#x60;orgID&#x60; parameter. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Task]
    def post_tasks(task_create_request, opts = {})
      data, _status_code, _headers = post_tasks_with_http_info(task_create_request, opts)
      data
    end

    # Create a task
    # Creates a [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) and returns the task.  Use this endpoint to create a scheduled task that runs a script.  #### Related guides  - [Get started with tasks](https://docs.influxdata.com/influxdb/latest/process-data/get-started/) - [Create a task](https://docs.influxdata.com/influxdb/latest/process-data/manage-tasks/create-task/) - [Common tasks](https://docs.influxdata.com/influxdb/latest/process-data/common-tasks/) - [Task configuration options](https://docs.influxdata.com/influxdb/latest/process-data/task-options/) 
    # @param task_create_request [TaskCreateRequest] In the request body, provide the task.  #### InfluxDB OSS  - Requires either the &#x60;org&#x60; parameter or the &#x60;orgID&#x60; parameter. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(Task, Integer, Hash)>] Task data, response status code and response headers
    def post_tasks_with_http_info(task_create_request, opts = {})
      # verify the required parameter 'task_create_request' is set
      if @api_client.config.client_side_validation && task_create_request.nil?
        fail ArgumentError, "Missing the required parameter 'task_create_request' when calling TasksApi.post_tasks"
      end
      # resource path
      local_var_path = '/tasks'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(task_create_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Task'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"TasksApi.post_tasks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      return data, status_code, headers
    end

    # Add a label to a task
    # Adds a label to a [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task).  Use this endpoint to add a label to a task. Labels are a way to add metadata to InfluxDB resources. You can use labels for grouping and filtering resources in the InfluxDB UI, `influx` CLI, and InfluxDB API. 
    # @param task_id [String] A task ID. Specifies the [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) to label. 
    # @param label_mapping [LabelMapping] In the request body, provide an object that specifies the label. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [LabelResponse]
    def post_tasks_id_labels(task_id, label_mapping, opts = {})
      data, _status_code, _headers = post_tasks_id_labels_with_http_info(task_id, label_mapping, opts)
      data
    end

    # Add a label to a task
    # Adds a label to a [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task).  Use this endpoint to add a label to a task. Labels are a way to add metadata to InfluxDB resources. You can use labels for grouping and filtering resources in the InfluxDB UI, &#x60;influx&#x60; CLI, and InfluxDB API. 
    # @param task_id [String] A task ID. Specifies the [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) to label. 
    # @param label_mapping [LabelMapping] In the request body, provide an object that specifies the label. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(LabelResponse, Integer, Hash)>] LabelResponse data, response status code and response headers
    def post_tasks_id_labels_with_http_info(task_id, label_mapping, opts = {})
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling TasksApi.post_tasks_id_labels"
      end
      # verify the required parameter 'label_mapping' is set
      if @api_client.config.client_side_validation && label_mapping.nil?
        fail ArgumentError, "Missing the required parameter 'label_mapping' when calling TasksApi.post_tasks_id_labels"
      end
      # resource path
      local_var_path = '/tasks/{taskID}/labels'.sub('{' + 'taskID' + '}', CGI.escape(task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(label_mapping)

      # return_type
      return_type = opts[:debug_return_type] || 'LabelResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"TasksApi.post_tasks_id_labels",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      return data, status_code, headers
    end

    # Add a member to a task
    # **Deprecated**: Tasks don't use `owner` and `member` roles. Use [`/api/v2/authorizations`](#tag/Authorizations-(API-tokens)) to assign user permissions.  Adds a specified user to members of the specified [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) and then returns the member. 
    # @param task_id [String] A [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) ID. Specifies the task for the member. 
    # @param add_resource_member_request_body [AddResourceMemberRequestBody] In the request body, provide an object that specifies the user. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [ResourceMember]
    def post_tasks_id_members(task_id, add_resource_member_request_body, opts = {})
      data, _status_code, _headers = post_tasks_id_members_with_http_info(task_id, add_resource_member_request_body, opts)
      data
    end

    # Add a member to a task
    # **Deprecated**: Tasks don&#39;t use &#x60;owner&#x60; and &#x60;member&#x60; roles. Use [&#x60;/api/v2/authorizations&#x60;](#tag/Authorizations-(API-tokens)) to assign user permissions.  Adds a specified user to members of the specified [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) and then returns the member. 
    # @param task_id [String] A [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) ID. Specifies the task for the member. 
    # @param add_resource_member_request_body [AddResourceMemberRequestBody] In the request body, provide an object that specifies the user. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(ResourceMember, Integer, Hash)>] ResourceMember data, response status code and response headers
    def post_tasks_id_members_with_http_info(task_id, add_resource_member_request_body, opts = {})
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling TasksApi.post_tasks_id_members"
      end
      # verify the required parameter 'add_resource_member_request_body' is set
      if @api_client.config.client_side_validation && add_resource_member_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'add_resource_member_request_body' when calling TasksApi.post_tasks_id_members"
      end
      # resource path
      local_var_path = '/tasks/{taskID}/members'.sub('{' + 'taskID' + '}', CGI.escape(task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(add_resource_member_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'ResourceMember'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"TasksApi.post_tasks_id_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      return data, status_code, headers
    end

    # Add an owner for a task
    # **Deprecated**: Tasks don't use `owner` and `member` roles. Use [`/api/v2/authorizations`](#tag/Authorizations-(API-tokens)) to assign user permissions.  Adds a specified user to owners of the specified task and then returns the owner.  Use this endpoint to create a _resource owner_ for the task. A _resource owner_ is a user with `role: owner` for a specific resource. 
    # @param task_id [String] A task ID. Specifies the [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) for the owner. 
    # @param add_resource_member_request_body [AddResourceMemberRequestBody] In the request body, provide an object that specifies the user. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [ResourceOwner]
    def post_tasks_id_owners(task_id, add_resource_member_request_body, opts = {})
      data, _status_code, _headers = post_tasks_id_owners_with_http_info(task_id, add_resource_member_request_body, opts)
      data
    end

    # Add an owner for a task
    # **Deprecated**: Tasks don&#39;t use &#x60;owner&#x60; and &#x60;member&#x60; roles. Use [&#x60;/api/v2/authorizations&#x60;](#tag/Authorizations-(API-tokens)) to assign user permissions.  Adds a specified user to owners of the specified task and then returns the owner.  Use this endpoint to create a _resource owner_ for the task. A _resource owner_ is a user with &#x60;role: owner&#x60; for a specific resource. 
    # @param task_id [String] A task ID. Specifies the [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) for the owner. 
    # @param add_resource_member_request_body [AddResourceMemberRequestBody] In the request body, provide an object that specifies the user. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(ResourceOwner, Integer, Hash)>] ResourceOwner data, response status code and response headers
    def post_tasks_id_owners_with_http_info(task_id, add_resource_member_request_body, opts = {})
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling TasksApi.post_tasks_id_owners"
      end
      # verify the required parameter 'add_resource_member_request_body' is set
      if @api_client.config.client_side_validation && add_resource_member_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'add_resource_member_request_body' when calling TasksApi.post_tasks_id_owners"
      end
      # resource path
      local_var_path = '/tasks/{taskID}/owners'.sub('{' + 'taskID' + '}', CGI.escape(task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(add_resource_member_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'ResourceOwner'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"TasksApi.post_tasks_id_owners",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      return data, status_code, headers
    end

    # Start a task run, overriding the schedule
    # Schedules a task run to start immediately, ignoring scheduled runs.  Use this endpoint to manually start a task run. Scheduled runs will continue to run as scheduled. This may result in concurrently running tasks.  To _retry_ a previous run (and avoid creating a new run), use the [`POST /api/v2/tasks/{taskID}/runs/{runID}/retry` endpoint](#operation/PostTasksIDRunsIDRetry).  #### Limitations  - Queuing a task run requires that the task's `status` property be set to `active`. 
    # @param task_id [String] A task ID. Specifies the [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) to to run. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @option opts [RunManually] :run_manually 
    # @return [Run]
    def post_tasks_id_runs(task_id, opts = {})
      data, _status_code, _headers = post_tasks_id_runs_with_http_info(task_id, opts)
      data
    end

    # Start a task run, overriding the schedule
    # Schedules a task run to start immediately, ignoring scheduled runs.  Use this endpoint to manually start a task run. Scheduled runs will continue to run as scheduled. This may result in concurrently running tasks.  To _retry_ a previous run (and avoid creating a new run), use the [&#x60;POST /api/v2/tasks/{taskID}/runs/{runID}/retry&#x60; endpoint](#operation/PostTasksIDRunsIDRetry).  #### Limitations  - Queuing a task run requires that the task&#39;s &#x60;status&#x60; property be set to &#x60;active&#x60;. 
    # @param task_id [String] A task ID. Specifies the [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) to to run. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @option opts [RunManually] :run_manually 
    # @return [Array<(Run, Integer, Hash)>] Run data, response status code and response headers
    def post_tasks_id_runs_with_http_info(task_id, opts = {})
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling TasksApi.post_tasks_id_runs"
      end
      # resource path
      local_var_path = '/tasks/{taskID}/runs'.sub('{' + 'taskID' + '}', CGI.escape(task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'run_manually'])

      # return_type
      return_type = opts[:debug_return_type] || 'Run'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"TasksApi.post_tasks_id_runs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      return data, status_code, headers
    end

    # Retry a task run
    # Queues a [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) run to retry and then returns the scheduled run.  To manually start a _new_ task run, use the [`POST /api/v2/tasks/{taskID}/runs` endpoint](#operation/PostTasksIDRuns).  #### Limitations  - Queuing a task run requires that the task's `status` property be set to `active`. 
    # @param task_id [String] A task ID. Specifies the [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) that the task run belongs to. 
    # @param run_id [String] A task run ID. Specifies the task run to retry.  To find a task run ID, use the [&#x60;GET /api/v2/tasks/{taskID}/runs&#x60; endpoint](#operation/GetTasksIDRuns) to list task runs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @option opts [Object] :body 
    # @return [Run]
    def post_tasks_id_runs_id_retry(task_id, run_id, opts = {})
      data, _status_code, _headers = post_tasks_id_runs_id_retry_with_http_info(task_id, run_id, opts)
      data
    end

    # Retry a task run
    # Queues a [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) run to retry and then returns the scheduled run.  To manually start a _new_ task run, use the [&#x60;POST /api/v2/tasks/{taskID}/runs&#x60; endpoint](#operation/PostTasksIDRuns).  #### Limitations  - Queuing a task run requires that the task&#39;s &#x60;status&#x60; property be set to &#x60;active&#x60;. 
    # @param task_id [String] A task ID. Specifies the [task](https://docs.influxdata.com/influxdb/latest/reference/glossary/#task) that the task run belongs to. 
    # @param run_id [String] A task run ID. Specifies the task run to retry.  To find a task run ID, use the [&#x60;GET /api/v2/tasks/{taskID}/runs&#x60; endpoint](#operation/GetTasksIDRuns) to list task runs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @option opts [Object] :body 
    # @return [Array<(Run, Integer, Hash)>] Run data, response status code and response headers
    def post_tasks_id_runs_id_retry_with_http_info(task_id, run_id, opts = {})
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling TasksApi.post_tasks_id_runs_id_retry"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling TasksApi.post_tasks_id_runs_id_retry"
      end
      # resource path
      local_var_path = '/tasks/{taskID}/runs/{runID}/retry'.sub('{' + 'taskID' + '}', CGI.escape(task_id.to_s)).sub('{' + 'runID' + '}', CGI.escape(run_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json; charset=utf-8'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'Run'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"TasksApi.post_tasks_id_runs_id_retry",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      return data, status_code, headers
    end
  end
end
