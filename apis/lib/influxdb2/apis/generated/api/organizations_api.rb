=begin
#InfluxDB OSS API Service

#The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 

The version of the OpenAPI document: 2.0.0

Generated by: https://openapi-generator.tech

=end

require 'cgi'

module InfluxDB2::API
  class OrganizationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete an organization
    # @param org_id [String] The ID of the organization to delete.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [nil]
    def delete_orgs_id(org_id, opts = {})
      delete_orgs_id_with_http_info(org_id, opts)
      nil
    end

    # Delete an organization
    # @param org_id [String] The ID of the organization to delete.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_orgs_id_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.delete_orgs_id ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling OrganizationsApi.delete_orgs_id"
      end
      # resource path
      local_var_path = '/orgs/{orgID}'.sub('{' + 'orgID' + '}', CGI.escape(org_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.delete_orgs_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#delete_orgs_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a member from an organization
    # @param user_id [String] The ID of the member to remove.
    # @param org_id [String] The organization ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [nil]
    def delete_orgs_id_members_id(user_id, org_id, opts = {})
      delete_orgs_id_members_id_with_http_info(user_id, org_id, opts)
      nil
    end

    # Remove a member from an organization
    # @param user_id [String] The ID of the member to remove.
    # @param org_id [String] The organization ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_orgs_id_members_id_with_http_info(user_id, org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.delete_orgs_id_members_id ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling OrganizationsApi.delete_orgs_id_members_id"
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling OrganizationsApi.delete_orgs_id_members_id"
      end
      # resource path
      local_var_path = '/orgs/{orgID}/members/{userID}'.sub('{' + 'userID' + '}', CGI.escape(user_id.to_s)).sub('{' + 'orgID' + '}', CGI.escape(org_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.delete_orgs_id_members_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#delete_orgs_id_members_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove an owner from an organization
    # @param user_id [String] The ID of the owner to remove.
    # @param org_id [String] The organization ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [nil]
    def delete_orgs_id_owners_id(user_id, org_id, opts = {})
      delete_orgs_id_owners_id_with_http_info(user_id, org_id, opts)
      nil
    end

    # Remove an owner from an organization
    # @param user_id [String] The ID of the owner to remove.
    # @param org_id [String] The organization ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_orgs_id_owners_id_with_http_info(user_id, org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.delete_orgs_id_owners_id ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling OrganizationsApi.delete_orgs_id_owners_id"
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling OrganizationsApi.delete_orgs_id_owners_id"
      end
      # resource path
      local_var_path = '/orgs/{orgID}/owners/{userID}'.sub('{' + 'userID' + '}', CGI.escape(user_id.to_s)).sub('{' + 'orgID' + '}', CGI.escape(org_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.delete_orgs_id_owners_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#delete_orgs_id_owners_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all organizations
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @option opts [Integer] :offset 
    # @option opts [Integer] :limit  (default to 20)
    # @option opts [Boolean] :descending  (default to false)
    # @option opts [String] :org Filter organizations to a specific organization name.
    # @option opts [String] :org_id Filter organizations to a specific organization ID.
    # @option opts [String] :user_id Filter organizations to a specific user ID.
    # @return [Organizations]
    def get_orgs(opts = {})
      data, _status_code, _headers = get_orgs_with_http_info(opts)
      data
    end

    # List all organizations
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @option opts [Integer] :offset 
    # @option opts [Integer] :limit 
    # @option opts [Boolean] :descending 
    # @option opts [String] :org Filter organizations to a specific organization name.
    # @option opts [String] :org_id Filter organizations to a specific organization ID.
    # @option opts [String] :user_id Filter organizations to a specific user ID.
    # @return [Array<(Organizations, Integer, Hash)>] Organizations data, response status code and response headers
    def get_orgs_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.get_orgs ...'
      end
      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling OrganizationsApi.get_orgs, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling OrganizationsApi.get_orgs, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling OrganizationsApi.get_orgs, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/orgs'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'descending'] = opts[:'descending'] if !opts[:'descending'].nil?
      query_params[:'org'] = opts[:'org'] if !opts[:'org'].nil?
      query_params[:'orgID'] = opts[:'org_id'] if !opts[:'org_id'].nil?
      query_params[:'userID'] = opts[:'user_id'] if !opts[:'user_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Organizations'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.get_orgs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#get_orgs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an organization
    # @param org_id [String] The ID of the organization to get.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Organization]
    def get_orgs_id(org_id, opts = {})
      data, _status_code, _headers = get_orgs_id_with_http_info(org_id, opts)
      data
    end

    # Retrieve an organization
    # @param org_id [String] The ID of the organization to get.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(Organization, Integer, Hash)>] Organization data, response status code and response headers
    def get_orgs_id_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.get_orgs_id ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling OrganizationsApi.get_orgs_id"
      end
      # resource path
      local_var_path = '/orgs/{orgID}'.sub('{' + 'orgID' + '}', CGI.escape(org_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Organization'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.get_orgs_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#get_orgs_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all members of an organization
    # @param org_id [String] The organization ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [ResourceMembers]
    def get_orgs_id_members(org_id, opts = {})
      data, _status_code, _headers = get_orgs_id_members_with_http_info(org_id, opts)
      data
    end

    # List all members of an organization
    # @param org_id [String] The organization ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(ResourceMembers, Integer, Hash)>] ResourceMembers data, response status code and response headers
    def get_orgs_id_members_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.get_orgs_id_members ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling OrganizationsApi.get_orgs_id_members"
      end
      # resource path
      local_var_path = '/orgs/{orgID}/members'.sub('{' + 'orgID' + '}', CGI.escape(org_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResourceMembers'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.get_orgs_id_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#get_orgs_id_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all owners of an organization
    # @param org_id [String] The organization ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [ResourceOwners]
    def get_orgs_id_owners(org_id, opts = {})
      data, _status_code, _headers = get_orgs_id_owners_with_http_info(org_id, opts)
      data
    end

    # List all owners of an organization
    # @param org_id [String] The organization ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(ResourceOwners, Integer, Hash)>] ResourceOwners data, response status code and response headers
    def get_orgs_id_owners_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.get_orgs_id_owners ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling OrganizationsApi.get_orgs_id_owners"
      end
      # resource path
      local_var_path = '/orgs/{orgID}/owners'.sub('{' + 'orgID' + '}', CGI.escape(org_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResourceOwners'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.get_orgs_id_owners",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#get_orgs_id_owners\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an organization
    # @param org_id [String] The ID of the organization to get.
    # @param patch_organization_request [PatchOrganizationRequest] Organization update to apply
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Organization]
    def patch_orgs_id(org_id, patch_organization_request, opts = {})
      data, _status_code, _headers = patch_orgs_id_with_http_info(org_id, patch_organization_request, opts)
      data
    end

    # Update an organization
    # @param org_id [String] The ID of the organization to get.
    # @param patch_organization_request [PatchOrganizationRequest] Organization update to apply
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(Organization, Integer, Hash)>] Organization data, response status code and response headers
    def patch_orgs_id_with_http_info(org_id, patch_organization_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.patch_orgs_id ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling OrganizationsApi.patch_orgs_id"
      end
      # verify the required parameter 'patch_organization_request' is set
      if @api_client.config.client_side_validation && patch_organization_request.nil?
        fail ArgumentError, "Missing the required parameter 'patch_organization_request' when calling OrganizationsApi.patch_orgs_id"
      end
      # resource path
      local_var_path = '/orgs/{orgID}'.sub('{' + 'orgID' + '}', CGI.escape(org_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(patch_organization_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Organization'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.patch_orgs_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#patch_orgs_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an organization
    # @param post_organization_request [PostOrganizationRequest] Organization to create
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Organization]
    def post_orgs(post_organization_request, opts = {})
      data, _status_code, _headers = post_orgs_with_http_info(post_organization_request, opts)
      data
    end

    # Create an organization
    # @param post_organization_request [PostOrganizationRequest] Organization to create
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(Organization, Integer, Hash)>] Organization data, response status code and response headers
    def post_orgs_with_http_info(post_organization_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.post_orgs ...'
      end
      # verify the required parameter 'post_organization_request' is set
      if @api_client.config.client_side_validation && post_organization_request.nil?
        fail ArgumentError, "Missing the required parameter 'post_organization_request' when calling OrganizationsApi.post_orgs"
      end
      # resource path
      local_var_path = '/orgs'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(post_organization_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Organization'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.post_orgs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#post_orgs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a member to an organization
    # @param org_id [String] The organization ID.
    # @param add_resource_member_request_body [AddResourceMemberRequestBody] User to add as member
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [ResourceMember]
    def post_orgs_id_members(org_id, add_resource_member_request_body, opts = {})
      data, _status_code, _headers = post_orgs_id_members_with_http_info(org_id, add_resource_member_request_body, opts)
      data
    end

    # Add a member to an organization
    # @param org_id [String] The organization ID.
    # @param add_resource_member_request_body [AddResourceMemberRequestBody] User to add as member
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(ResourceMember, Integer, Hash)>] ResourceMember data, response status code and response headers
    def post_orgs_id_members_with_http_info(org_id, add_resource_member_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.post_orgs_id_members ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling OrganizationsApi.post_orgs_id_members"
      end
      # verify the required parameter 'add_resource_member_request_body' is set
      if @api_client.config.client_side_validation && add_resource_member_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'add_resource_member_request_body' when calling OrganizationsApi.post_orgs_id_members"
      end
      # resource path
      local_var_path = '/orgs/{orgID}/members'.sub('{' + 'orgID' + '}', CGI.escape(org_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(add_resource_member_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'ResourceMember'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.post_orgs_id_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#post_orgs_id_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add an owner to an organization
    # @param org_id [String] The organization ID.
    # @param add_resource_member_request_body [AddResourceMemberRequestBody] User to add as owner
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [ResourceOwner]
    def post_orgs_id_owners(org_id, add_resource_member_request_body, opts = {})
      data, _status_code, _headers = post_orgs_id_owners_with_http_info(org_id, add_resource_member_request_body, opts)
      data
    end

    # Add an owner to an organization
    # @param org_id [String] The organization ID.
    # @param add_resource_member_request_body [AddResourceMemberRequestBody] User to add as owner
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(ResourceOwner, Integer, Hash)>] ResourceOwner data, response status code and response headers
    def post_orgs_id_owners_with_http_info(org_id, add_resource_member_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.post_orgs_id_owners ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling OrganizationsApi.post_orgs_id_owners"
      end
      # verify the required parameter 'add_resource_member_request_body' is set
      if @api_client.config.client_side_validation && add_resource_member_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'add_resource_member_request_body' when calling OrganizationsApi.post_orgs_id_owners"
      end
      # resource path
      local_var_path = '/orgs/{orgID}/owners'.sub('{' + 'orgID' + '}', CGI.escape(org_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(add_resource_member_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'ResourceOwner'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.post_orgs_id_owners",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#post_orgs_id_owners\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
