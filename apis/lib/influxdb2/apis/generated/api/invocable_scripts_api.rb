=begin
#InfluxDB OSS API Service

#The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 

The version of the OpenAPI document: 2.0.0

Generated by: https://openapi-generator.tech

=end

require 'cgi'

module InfluxDB2::API
  class InvocableScriptsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a script
    # Deletes a script and all associated records.
    # @param script_id [String] The ID of the script to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_scripts_id(script_id, opts = {})
      delete_scripts_id_with_http_info(script_id, opts)
      nil
    end

    # Delete a script
    # Deletes a script and all associated records.
    # @param script_id [String] The ID of the script to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_scripts_id_with_http_info(script_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvocableScriptsApi.delete_scripts_id ...'
      end
      # verify the required parameter 'script_id' is set
      if @api_client.config.client_side_validation && script_id.nil?
        fail ArgumentError, "Missing the required parameter 'script_id' when calling InvocableScriptsApi.delete_scripts_id"
      end
      # resource path
      local_var_path = '/scripts/{scriptID}'.sub('{' + 'scriptID' + '}', CGI.escape(script_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"InvocableScriptsApi.delete_scripts_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvocableScriptsApi#delete_scripts_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List scripts
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of scripts to return.
    # @option opts [Integer] :offset The offset for pagination.
    # @return [Scripts]
    def get_scripts(opts = {})
      data, _status_code, _headers = get_scripts_with_http_info(opts)
      data
    end

    # List scripts
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of scripts to return.
    # @option opts [Integer] :offset The offset for pagination.
    # @return [Array<(Scripts, Integer, Hash)>] Scripts data, response status code and response headers
    def get_scripts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvocableScriptsApi.get_scripts ...'
      end
      # resource path
      local_var_path = '/scripts'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Scripts'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"InvocableScriptsApi.get_scripts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvocableScriptsApi#get_scripts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a script
    # Uses script ID to retrieve details of an invocable script.
    # @param script_id [String] The script ID.
    # @param [Hash] opts the optional parameters
    # @return [Script]
    def get_scripts_id(script_id, opts = {})
      data, _status_code, _headers = get_scripts_id_with_http_info(script_id, opts)
      data
    end

    # Retrieve a script
    # Uses script ID to retrieve details of an invocable script.
    # @param script_id [String] The script ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Script, Integer, Hash)>] Script data, response status code and response headers
    def get_scripts_id_with_http_info(script_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvocableScriptsApi.get_scripts_id ...'
      end
      # verify the required parameter 'script_id' is set
      if @api_client.config.client_side_validation && script_id.nil?
        fail ArgumentError, "Missing the required parameter 'script_id' when calling InvocableScriptsApi.get_scripts_id"
      end
      # resource path
      local_var_path = '/scripts/{scriptID}'.sub('{' + 'scriptID' + '}', CGI.escape(script_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Script'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"InvocableScriptsApi.get_scripts_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvocableScriptsApi#get_scripts_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a script
    # Updates properties (`name`, `description`, and `script`) of an invocable script. 
    # @param script_id [String] The script ID.
    # @param script_update_request [ScriptUpdateRequest] Script update to apply
    # @param [Hash] opts the optional parameters
    # @return [Script]
    def patch_scripts_id(script_id, script_update_request, opts = {})
      data, _status_code, _headers = patch_scripts_id_with_http_info(script_id, script_update_request, opts)
      data
    end

    # Update a script
    # Updates properties (&#x60;name&#x60;, &#x60;description&#x60;, and &#x60;script&#x60;) of an invocable script. 
    # @param script_id [String] The script ID.
    # @param script_update_request [ScriptUpdateRequest] Script update to apply
    # @param [Hash] opts the optional parameters
    # @return [Array<(Script, Integer, Hash)>] Script data, response status code and response headers
    def patch_scripts_id_with_http_info(script_id, script_update_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvocableScriptsApi.patch_scripts_id ...'
      end
      # verify the required parameter 'script_id' is set
      if @api_client.config.client_side_validation && script_id.nil?
        fail ArgumentError, "Missing the required parameter 'script_id' when calling InvocableScriptsApi.patch_scripts_id"
      end
      # verify the required parameter 'script_update_request' is set
      if @api_client.config.client_side_validation && script_update_request.nil?
        fail ArgumentError, "Missing the required parameter 'script_update_request' when calling InvocableScriptsApi.patch_scripts_id"
      end
      # resource path
      local_var_path = '/scripts/{scriptID}'.sub('{' + 'scriptID' + '}', CGI.escape(script_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(script_update_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Script'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"InvocableScriptsApi.patch_scripts_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvocableScriptsApi#patch_scripts_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a script
    # @param script_create_request [ScriptCreateRequest] The script to create.
    # @param [Hash] opts the optional parameters
    # @return [Script]
    def post_scripts(script_create_request, opts = {})
      data, _status_code, _headers = post_scripts_with_http_info(script_create_request, opts)
      data
    end

    # Create a script
    # @param script_create_request [ScriptCreateRequest] The script to create.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Script, Integer, Hash)>] Script data, response status code and response headers
    def post_scripts_with_http_info(script_create_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvocableScriptsApi.post_scripts ...'
      end
      # verify the required parameter 'script_create_request' is set
      if @api_client.config.client_side_validation && script_create_request.nil?
        fail ArgumentError, "Missing the required parameter 'script_create_request' when calling InvocableScriptsApi.post_scripts"
      end
      # resource path
      local_var_path = '/scripts'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(script_create_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Script'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"InvocableScriptsApi.post_scripts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvocableScriptsApi#post_scripts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Invoke a script
    # Invokes a script and substitutes `params` keys referenced in the script with `params` key-values sent in the request body.
    # @param script_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [ScriptInvocationParams] :script_invocation_params 
    # @return [String]
    def post_scripts_id_invoke(script_id, opts = {})
      data, _status_code, _headers = post_scripts_id_invoke_with_http_info(script_id, opts)
      data
    end

    # Invoke a script
    # Invokes a script and substitutes &#x60;params&#x60; keys referenced in the script with &#x60;params&#x60; key-values sent in the request body.
    # @param script_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [ScriptInvocationParams] :script_invocation_params 
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def post_scripts_id_invoke_with_http_info(script_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvocableScriptsApi.post_scripts_id_invoke ...'
      end
      # verify the required parameter 'script_id' is set
      if @api_client.config.client_side_validation && script_id.nil?
        fail ArgumentError, "Missing the required parameter 'script_id' when calling InvocableScriptsApi.post_scripts_id_invoke"
      end
      # resource path
      local_var_path = '/scripts/{scriptID}/invoke'.sub('{' + 'scriptID' + '}', CGI.escape(script_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'script_invocation_params'])

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"InvocableScriptsApi.post_scripts_id_invoke",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvocableScriptsApi#post_scripts_id_invoke\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
