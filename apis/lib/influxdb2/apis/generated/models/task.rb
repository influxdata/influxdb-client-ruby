=begin
#InfluxDB OSS API Service

#The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 

The version of the OpenAPI document: 2.0.0

Generated by: https://openapi-generator.tech

=end

require 'date'
require 'set'
require 'time'

module InfluxDB2::API
  class Task
    # The resource ID that InfluxDB uses to uniquely identify the task. 
    attr_accessor :id

    # An organization ID. Identifies the [organization](https://docs.influxdata.com/influxdb/latest/reference/glossary/#organization) that owns the task. 
    attr_accessor :org_id

    # An organization name. Identifies the [organization](https://docs.influxdata.com/influxdb/latest/reference/glossary/#organization) that owns the task. 
    attr_accessor :org

    # The name of the task.
    attr_accessor :name

    # A description of the task.
    attr_accessor :description

    # A user ID. Identifies the [user](https://docs.influxdata.com/influxdb/latest/reference/glossary/#user) that owns the task.  To find a user ID, use the [`GET /api/v2/users` endpoint](#operation/GetUsers) to list users. 
    attr_accessor :owner_id

    attr_accessor :status

    attr_accessor :labels

    # An authorization ID. Identifies the authorization used when the task communicates with the query engine.  To find an authorization ID, use the [`GET /api/v2/authorizations` endpoint](#operation/GetAuthorizations) to list authorizations. 
    attr_accessor :authorization_id

    # Flux with [task configuration options](https://docs.influxdata.com/influxdb/latest/process-data/task-options/) and the script for the task to run.  #### Related guides  - [Task configuration options](https://docs.influxdata.com/influxdb/latest/process-data/task-options/) 
    attr_accessor :flux

    # The interval ([duration literal](https://docs.influxdata.com/influxdb/latest/reference/glossary/#rfc3339-timestamp)) at which the task runs. `every` also determines when the task first runs, depending on the specified time.
    attr_accessor :every

    # A [Cron expression](https://en.wikipedia.org/wiki/Cron#Overview) that defines the schedule on which the task runs. InfluxDB uses the system time when evaluating Cron expressions.
    attr_accessor :cron

    # A [duration](https://docs.influxdata.com/flux/v0.x/spec/lexical-elements/#duration-literals) to delay execution of the task after the scheduled time has elapsed. `0` removes the offset.
    attr_accessor :offset

    # A timestamp ([RFC3339 date/time format](https://docs.influxdata.com/influxdb/latest/reference/glossary/#rfc3339-timestamp)) of the latest scheduled and completed run.
    attr_accessor :latest_completed

    attr_reader :last_run_status

    attr_accessor :last_run_error

    attr_accessor :created_at

    attr_accessor :updated_at

    attr_accessor :links

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'org_id' => :'orgID',
        :'org' => :'org',
        :'name' => :'name',
        :'description' => :'description',
        :'owner_id' => :'ownerID',
        :'status' => :'status',
        :'labels' => :'labels',
        :'authorization_id' => :'authorizationID',
        :'flux' => :'flux',
        :'every' => :'every',
        :'cron' => :'cron',
        :'offset' => :'offset',
        :'latest_completed' => :'latestCompleted',
        :'last_run_status' => :'lastRunStatus',
        :'last_run_error' => :'lastRunError',
        :'created_at' => :'createdAt',
        :'updated_at' => :'updatedAt',
        :'links' => :'links',
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'org_id' => :'String',
        :'org' => :'String',
        :'name' => :'String',
        :'description' => :'String',
        :'owner_id' => :'String',
        :'status' => :'TaskStatusType',
        :'labels' => :'Array<Label>',
        :'authorization_id' => :'String',
        :'flux' => :'String',
        :'every' => :'String',
        :'cron' => :'String',
        :'offset' => :'String',
        :'latest_completed' => :'Time',
        :'last_run_status' => :'String',
        :'last_run_error' => :'String',
        :'created_at' => :'Time',
        :'updated_at' => :'Time',
        :'links' => :'TaskLinks'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `InfluxDB2::Task` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `InfluxDB2::Task`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'org_id')
        self.org_id = attributes[:'org_id']
      end

      if attributes.key?(:'org')
        self.org = attributes[:'org']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'owner_id')
        self.owner_id = attributes[:'owner_id']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'labels')
        if (value = attributes[:'labels']).is_a?(Array)
          self.labels = value
        end
      end

      if attributes.key?(:'authorization_id')
        self.authorization_id = attributes[:'authorization_id']
      end

      if attributes.key?(:'flux')
        self.flux = attributes[:'flux']
      end

      if attributes.key?(:'every')
        self.every = attributes[:'every']
      end

      if attributes.key?(:'cron')
        self.cron = attributes[:'cron']
      end

      if attributes.key?(:'offset')
        self.offset = attributes[:'offset']
      end

      if attributes.key?(:'latest_completed')
        self.latest_completed = attributes[:'latest_completed']
      end

      if attributes.key?(:'last_run_status')
        self.last_run_status = attributes[:'last_run_status']
      end

      if attributes.key?(:'last_run_error')
        self.last_run_error = attributes[:'last_run_error']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'links')
        self.links = attributes[:'links']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @org_id.nil?
        invalid_properties.push('invalid value for "org_id", org_id cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @flux.nil?
        invalid_properties.push('invalid value for "flux", flux cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @org_id.nil?
      return false if @name.nil?
      return false if @flux.nil?
      last_run_status_validator = EnumAttributeValidator.new('String', ["failed", "success", "canceled"])
      return false unless last_run_status_validator.valid?(@last_run_status)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] last_run_status Object to be assigned
    def last_run_status=(last_run_status)
      validator = EnumAttributeValidator.new('String', ["failed", "success", "canceled"])
      unless validator.valid?(last_run_status)
        fail ArgumentError, "invalid value for \"last_run_status\", must be one of #{validator.allowable_values}."
      end
      @last_run_status = last_run_status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          org_id == o.org_id &&
          org == o.org &&
          name == o.name &&
          description == o.description &&
          owner_id == o.owner_id &&
          status == o.status &&
          labels == o.labels &&
          authorization_id == o.authorization_id &&
          flux == o.flux &&
          every == o.every &&
          cron == o.cron &&
          offset == o.offset &&
          latest_completed == o.latest_completed &&
          last_run_status == o.last_run_status &&
          last_run_error == o.last_run_error &&
          created_at == o.created_at &&
          updated_at == o.updated_at &&
          links == o.links
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, org_id, org, name, description, owner_id, status, labels, authorization_id, flux, every, cron, offset, latest_completed, last_run_status, last_run_error, created_at, updated_at, links].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        InfluxDB2::API.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
